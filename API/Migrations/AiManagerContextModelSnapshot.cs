// <auto-generated />
using System;
using API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AiManagerContext))]
    partial class AiManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Entities.AbpAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "ExecutionDuration" }, "IX_AbpAuditLogs_TenantId_ExecutionDuration");

                    b.HasIndex(new[] { "TenantId", "ExecutionTime" }, "IX_AbpAuditLogs_TenantId_ExecutionTime");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpAuditLogs_TenantId_UserId");

                    b.ToTable("AbpAuditLogs", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpBackgroundJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IsAbandoned", "NextTryTime" }, "IX_AbpBackgroundJobs_IsAbandoned_NextTryTime");

                    b.ToTable("AbpBackgroundJobs", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpDynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DynamicPropertyId" }, "IX_AbpDynamicEntityProperties_DynamicPropertyId");

                    b.HasIndex(new[] { "EntityFullName", "DynamicPropertyId", "TenantId" }, "IX_AbpDynamicEntityProperties_EntityFullName_DynamicPropertyId_TenantId")
                        .IsUnique()
                        .HasFilter("([EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL)");

                    b.ToTable("AbpDynamicEntityProperties", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpDynamicEntityPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DynamicEntityPropertyId" }, "IX_AbpDynamicEntityPropertyValues_DynamicEntityPropertyId");

                    b.ToTable("AbpDynamicEntityPropertyValues", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpDynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PropertyName", "TenantId" }, "IX_AbpDynamicProperties_PropertyName_TenantId")
                        .IsUnique()
                        .HasFilter("([PropertyName] IS NOT NULL AND [TenantId] IS NOT NULL)");

                    b.ToTable("AbpDynamicProperties", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpDynamicPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DynamicPropertyId" }, "IX_AbpDynamicPropertyValues_DynamicPropertyId");

                    b.ToTable("AbpDynamicPropertyValues", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpEdition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ExpiringEditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("TrialDayCount")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingDayAfterExpire")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("AbpEditions", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpEntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EntityChangeSetId" }, "IX_AbpEntityChanges_EntityChangeSetId");

                    b.HasIndex(new[] { "EntityTypeFullName", "EntityId" }, "IX_AbpEntityChanges_EntityTypeFullName_EntityId");

                    b.ToTable("AbpEntityChanges", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpEntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "CreationTime" }, "IX_AbpEntityChangeSets_TenantId_CreationTime");

                    b.HasIndex(new[] { "TenantId", "Reason" }, "IX_AbpEntityChangeSets_TenantId_Reason");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpEntityChangeSets_TenantId_UserId");

                    b.ToTable("AbpEntityChangeSets", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpEntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NewValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OriginalValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EntityChangeId" }, "IX_AbpEntityPropertyChanges_EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EditionId", "Name" }, "IX_AbpFeatures_EditionId_Name");

                    b.HasIndex(new[] { "TenantId", "Name" }, "IX_AbpFeatures_TenantId_Name");

                    b.ToTable("AbpFeatures", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "Name" }, "IX_AbpLanguages_TenantId_Name");

                    b.ToTable("AbpLanguages", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "Source", "LanguageName", "Key" }, "IX_AbpLanguageTexts_TenantId_Source_LanguageName_Key");

                    b.ToTable("AbpLanguageTexts", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExcludedUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenantIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpNotificationSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NotificationName", "EntityTypeName", "EntityId", "UserId" }, "IX_AbpNotificationSubscriptions_NotificationName_EntityTypeName_EntityId_UserId");

                    b.HasIndex(new[] { "TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId" }, "IX_AbpNotificationSubscriptions_TenantId_NotificationName_EntityTypeName_EntityId_UserId");

                    b.ToTable("AbpNotificationSubscriptions", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ParentId" }, "IX_AbpOrganizationUnits_ParentId");

                    b.HasIndex(new[] { "TenantId", "Code" }, "IX_AbpOrganizationUnits_TenantId_Code");

                    b.ToTable("AbpOrganizationUnits", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpOrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "OrganizationUnitId" }, "IX_AbpOrganizationUnitRoles_TenantId_OrganizationUnitId");

                    b.HasIndex(new[] { "TenantId", "RoleId" }, "IX_AbpOrganizationUnitRoles_TenantId_RoleId");

                    b.ToTable("AbpOrganizationUnitRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AbpPermissions_RoleId");

                    b.HasIndex(new[] { "TenantId", "Name" }, "IX_AbpPermissions_TenantId_Name");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpPermissions_UserId");

                    b.ToTable("AbpPermissions", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpPersistedGrant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Expiration" }, "IX_AbpPersistedGrants_Expiration");

                    b.HasIndex(new[] { "SubjectId", "ClientId", "Type" }, "IX_AbpPersistedGrants_SubjectId_ClientId_Type");

                    b.HasIndex(new[] { "SubjectId", "SessionId", "Type" }, "IX_AbpPersistedGrants_SubjectId_SessionId_Type");

                    b.ToTable("AbpPersistedGrants", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorUserId" }, "IX_AbpRoles_CreatorUserId");

                    b.HasIndex(new[] { "DeleterUserId" }, "IX_AbpRoles_DeleterUserId");

                    b.HasIndex(new[] { "LastModifierUserId" }, "IX_AbpRoles_LastModifierUserId");

                    b.HasIndex(new[] { "TenantId", "NormalizedName" }, "IX_AbpRoles_TenantId_NormalizedName");

                    b.ToTable("AbpRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpRoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AbpRoleClaims_RoleId");

                    b.HasIndex(new[] { "TenantId", "ClaimType" }, "IX_AbpRoleClaims_TenantId_ClaimType");

                    b.ToTable("AbpRoleClaims", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "Name", "UserId" }, "IX_AbpSettings_TenantId_Name_UserId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL AND [Name] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpSettings_UserId");

                    b.ToTable("AbpSettings", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CustomCssId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInTrialPeriod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFileType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("LogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("SubscriptionEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreationTime" }, "IX_AbpTenants_CreationTime");

                    b.HasIndex(new[] { "CreatorUserId" }, "IX_AbpTenants_CreatorUserId");

                    b.HasIndex(new[] { "DeleterUserId" }, "IX_AbpTenants_DeleterUserId");

                    b.HasIndex(new[] { "EditionId" }, "IX_AbpTenants_EditionId");

                    b.HasIndex(new[] { "LastModifierUserId" }, "IX_AbpTenants_LastModifierUserId");

                    b.HasIndex(new[] { "SubscriptionEndDateUtc" }, "IX_AbpTenants_SubscriptionEndDateUtc");

                    b.HasIndex(new[] { "TenancyName" }, "IX_AbpTenants_TenancyName");

                    b.ToTable("AbpTenants", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpTenantNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_AbpTenantNotifications_TenantId");

                    b.ToTable("AbpTenantNotifications", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("GoogleAuthenticatorKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("SignInToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatorUserId" }, "IX_AbpUsers_CreatorUserId");

                    b.HasIndex(new[] { "DeleterUserId" }, "IX_AbpUsers_DeleterUserId");

                    b.HasIndex(new[] { "LastModifierUserId" }, "IX_AbpUsers_LastModifierUserId");

                    b.HasIndex(new[] { "TenantId", "NormalizedEmailAddress" }, "IX_AbpUsers_TenantId_NormalizedEmailAddress");

                    b.HasIndex(new[] { "TenantId", "NormalizedUserName" }, "IX_AbpUsers_TenantId_NormalizedUserName");

                    b.ToTable("AbpUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmailAddress" }, "IX_AbpUserAccounts_EmailAddress");

                    b.HasIndex(new[] { "TenantId", "EmailAddress" }, "IX_AbpUserAccounts_TenantId_EmailAddress");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpUserAccounts_TenantId_UserId");

                    b.HasIndex(new[] { "TenantId", "UserName" }, "IX_AbpUserAccounts_TenantId_UserName");

                    b.HasIndex(new[] { "UserName" }, "IX_AbpUserAccounts_UserName");

                    b.ToTable("AbpUserAccounts", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "ClaimType" }, "IX_AbpUserClaims_TenantId_ClaimType");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpUserClaims_UserId");

                    b.ToTable("AbpUserClaims", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "LoginProvider", "ProviderKey" }, "IX_AbpUserLogins_TenantId_LoginProvider_ProviderKey");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpUserLogins_TenantId_UserId");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpUserLogins_UserId");

                    b.ToTable("AbpUserLogins", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenancyName", "UserNameOrEmailAddress", "Result" }, "IX_AbpUserLoginAttempts_TenancyName_UserNameOrEmailAddress_Result");

                    b.HasIndex(new[] { "UserId", "TenantId" }, "IX_AbpUserLoginAttempts_UserId_TenantId");

                    b.ToTable("AbpUserLoginAttempts", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "State", "CreationTime" }, "IX_AbpUserNotifications_UserId_State_CreationTime");

                    b.ToTable("AbpUserNotifications", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "OrganizationUnitId" }, "IX_AbpUserOrganizationUnits_TenantId_OrganizationUnitId");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpUserOrganizationUnits_TenantId_UserId");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpUserOrganizationUnits_UserId");

                    b.ToTable("AbpUserOrganizationUnits", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "RoleId" }, "IX_AbpUserRoles_TenantId_RoleId");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpUserRoles_TenantId_UserId");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpUserRoles_UserId");

                    b.ToTable("AbpUserRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpUserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AbpUserTokens_TenantId_UserId");

                    b.HasIndex(new[] { "UserId" }, "IX_AbpUserTokens_UserId");

                    b.ToTable("AbpUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpWebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpWebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "WebhookEventId" }, "IX_AbpWebhookSendAttempts_WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpWebhookSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions", (string)null);
                });

            modelBuilder.Entity("API.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "uq_accounts_name")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("API.Entities.AlembicVersion", b =>
                {
                    b.Property<string>("VersionNum")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("version_num");

                    b.HasKey("VersionNum")
                        .HasName("alembic_version_pkc");

                    b.ToTable("alembic_version", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppBinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_AppBinaryObjects_TenantId");

                    b.ToTable("AppBinaryObjects", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadState")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("SharedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("TargetTenantId")
                        .HasColumnType("int");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TargetTenantId", "TargetUserId", "ReadState" }, "IX_AppChatMessages_TargetTenantId_TargetUserId_ReadState");

                    b.HasIndex(new[] { "TargetTenantId", "UserId", "ReadState" }, "IX_AppChatMessages_TargetTenantId_UserId_ReadState");

                    b.HasIndex(new[] { "TenantId", "TargetUserId", "ReadState" }, "IX_AppChatMessages_TenantId_TargetUserId_ReadState");

                    b.HasIndex(new[] { "TenantId", "UserId", "ReadState" }, "IX_AppChatMessages_TenantId_UserId_ReadState");

                    b.ToTable("AppChatMessages", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppFriendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FriendProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendTenancyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendTenantId")
                        .HasColumnType("int");

                    b.Property<long>("FriendUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FriendTenantId", "FriendUserId" }, "IX_AppFriendships_FriendTenantId_FriendUserId");

                    b.HasIndex(new[] { "FriendTenantId", "UserId" }, "IX_AppFriendships_FriendTenantId_UserId");

                    b.HasIndex(new[] { "TenantId", "FriendUserId" }, "IX_AppFriendships_TenantId_FriendUserId");

                    b.HasIndex(new[] { "TenantId", "UserId" }, "IX_AppFriendships_TenantId_UserId");

                    b.ToTable("AppFriendships", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantTaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppSubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("EditionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ErrorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRecurring")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EditionId" }, "IX_AppSubscriptionPayments_EditionId");

                    b.HasIndex(new[] { "ExternalPaymentId", "Gateway" }, "IX_AppSubscriptionPayments_ExternalPaymentId_Gateway");

                    b.HasIndex(new[] { "Status", "CreationTime" }, "IX_AppSubscriptionPayments_Status_CreationTime");

                    b.ToTable("AppSubscriptionPayments", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppSubscriptionPaymentsExtensionDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SubscriptionPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SubscriptionPaymentId", "Key", "IsDeleted" }, "IX_AppSubscriptionPaymentsExtensionData_SubscriptionPaymentId_Key_IsDeleted")
                        .IsUnique()
                        .HasFilter("([Key] IS NOT NULL)");

                    b.ToTable("AppSubscriptionPaymentsExtensionData", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppUserDelegation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId", "SourceUserId" }, "IX_AppUserDelegations_TenantId_SourceUserId");

                    b.HasIndex(new[] { "TenantId", "TargetUserId" }, "IX_AppUserDelegations_TenantId_TargetUserId");

                    b.ToTable("AppUserDelegations", (string)null);
                });

            modelBuilder.Entity("API.Entities.AverageSentimentByDataSource", b =>
                {
                    b.Property<double?>("AvgSentiment")
                        .HasColumnType("float");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("AverageSentimentByDataSource");
                });

            modelBuilder.Entity("API.Entities.AverageSentimentByProduct", b =>
                {
                    b.Property<double?>("AvgSentiment")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("AverageSentimentByProducts");
                });

            modelBuilder.Entity("API.Entities.AvgSentimentTopicLevel1", b =>
                {
                    b.Property<double?>("AvgSentiment")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("AvgSentimentTopicLevel1");
                });

            modelBuilder.Entity("API.Entities.AvgSentimentTopicLevel2", b =>
                {
                    b.Property<double?>("AvgSentiment")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("AvgSentimentTopicLevel2");
                });

            modelBuilder.Entity("API.Entities.AvgSentimentTopicLevel3", b =>
                {
                    b.Property<double?>("AvgSentiment")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("AvgSentimentTopicLevel3");
                });

            modelBuilder.Entity("API.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_Brands_TenantId");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("API.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_Competitions_TenantId");

                    b.ToTable("Competitions", (string)null);
                });

            modelBuilder.Entity("API.Entities.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastProcessed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_DataSources_TenantId");

                    b.ToTable("DataSources", (string)null);
                });

            modelBuilder.Entity("API.Entities.GrowthLevel1", b =>
                {
                    b.Property<float?>("Growth")
                        .HasColumnType("real");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("GrowthLevel1");
                });

            modelBuilder.Entity("API.Entities.GrowthLevel2", b =>
                {
                    b.Property<float?>("Growth")
                        .HasColumnType("real");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("GrowthLevel2");
                });

            modelBuilder.Entity("API.Entities.GrowthLevel3", b =>
                {
                    b.Property<float?>("Growth")
                        .HasColumnType("real");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("GrowthLevel3");
                });

            modelBuilder.Entity("API.Entities.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_Markets_TenantId");

                    b.ToTable("Markets", (string)null);
                });

            modelBuilder.Entity("API.Entities.Mention", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<float>("Growth")
                        .HasColumnType("real");

                    b.Property<string>("KeyTerms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketId")
                        .HasColumnType("int");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Recommendation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<float>("Sentiment")
                        .HasColumnType("real");

                    b.Property<long?>("SourceRowId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceUserId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DataSourceId" }, "IX_Mentions_DataSourceId");

                    b.HasIndex(new[] { "DateKey" }, "IX_Mentions_DateKey");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Mentions_LanguageId");

                    b.HasIndex(new[] { "MarketId" }, "IX_Mentions_MarketId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Mentions_ProductId");

                    b.HasIndex(new[] { "RegionId" }, "IX_Mentions_RegionId");

                    b.HasIndex(new[] { "TopicLevel1Id" }, "IX_Mentions_TopicLevel1Id");

                    b.HasIndex(new[] { "TopicLevel2Id" }, "IX_Mentions_TopicLevel2Id");

                    b.HasIndex(new[] { "TopicLevel3Id" }, "IX_Mentions_TopicLevel3Id");

                    b.ToTable("Mentions", (string)null);
                });

            modelBuilder.Entity("API.Entities.MostSearchedLevel2Topic", b =>
                {
                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("KeyTerms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Topic2")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("MostSearchedLevel2Topic");
                });

            modelBuilder.Entity("API.Entities.MostSearchedLevel3Topic", b =>
                {
                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("KeyTerms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Topic3")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("MostSearchedLevel3Topic");
                });

            modelBuilder.Entity("API.Entities.MostSearchedTopicLevel1", b =>
                {
                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<string>("KeyTerms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Topic1")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("MostSearchedTopicLevel1");
                });

            modelBuilder.Entity("API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amazon")
                        .HasColumnType("int");

                    b.Property<int>("Angies")
                        .HasColumnType("int");

                    b.Property<int>("Bbb")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Facebook")
                        .HasColumnType("int");

                    b.Property<int>("FourSquare")
                        .HasColumnType("int");

                    b.Property<int>("GoogleMyBusiness")
                        .HasColumnType("int");

                    b.Property<int>("ImDb")
                        .HasColumnType("int");

                    b.Property<int>("Manta")
                        .HasColumnType("int");

                    b.Property<bool>("OwnedCompetition")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TripAdvisor")
                        .HasColumnType("int");

                    b.Property<int>("TrustPilot")
                        .HasColumnType("int");

                    b.Property<int>("Twitter")
                        .HasColumnType("int");

                    b.Property<int>("YelowPages")
                        .HasColumnType("int");

                    b.Property<int>("Yelp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BrandId" }, "IX_Products_BrandId");

                    b.HasIndex(new[] { "CompetitionId" }, "IX_Products_CompetitionId");

                    b.HasIndex(new[] { "ProductClassificationId" }, "IX_Products_ProductClassificationId");

                    b.HasIndex(new[] { "ProductTypeId" }, "IX_Products_ProductTypeId");

                    b.HasIndex(new[] { "TenantId" }, "IX_Products_TenantId");

                    b.HasIndex(new[] { "TopicCategoryId" }, "IX_Products_TopicCategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_ProductClassifications_TenantId");

                    b.ToTable("ProductClassifications", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsAmazonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AmazonId")
                        .HasColumnType("int")
                        .HasColumnName("amazon_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<double?>("CommentRating")
                        .HasColumnType("float")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Reaction")
                        .HasColumnType("int")
                        .HasColumnName("reaction");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AmazonId" }, "IX_products_amazon_reviews_amazon_id");

                    b.ToTable("products_amazon_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsAmazonSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("images");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("item_id")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToAllReviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_to_all_reviews");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("('')");

                    b.Property<int?>("NumberOfRating")
                        .HasColumnType("int")
                        .HasColumnName("number_of_rating");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("number_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_description");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductInformation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_information");

                    b.Property<string>("ProductVariants")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_variants");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewsByComments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews_by_comments");

                    b.Property<string>("ReviewsByRating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews_by_rating");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_description");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "uq_products_amazon_search_item_id")
                        .IsUnique();

                    b.ToTable("products_amazon_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsBbbReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BbbId")
                        .HasColumnType("int")
                        .HasColumnName("bbb_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<double?>("CommentRating")
                        .HasColumnType("float")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Reaction")
                        .HasColumnType("int")
                        .HasColumnName("reaction");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BbbId" }, "IX_products_bbb_reviews_bbb_id");

                    b.ToTable("products_bbb_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsBbbSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Accredited")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("accredited");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("BbbFileOpened")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bbbFileOpened");

                    b.Property<string>("BbbRating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bbbRating");

                    b.Property<string>("BusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("bus_id")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("BusinessStart")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("businessStart");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categories");

                    b.Property<string>("ComplaintTypes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("complaintTypes");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Incorporated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("incorporated");

                    b.Property<bool?>("IsAccredited")
                        .HasColumnType("bit")
                        .HasColumnName("isAccredited");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("NumOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("num_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfEntity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("typeOfEntity");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<int?>("YearsInBusiness")
                        .HasColumnType("int")
                        .HasColumnName("yearsInBusiness");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusId" }, "uq_products_bbb_search_bus_id")
                        .IsUnique();

                    b.ToTable("products_bbb_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsBk", b =>
                {
                    b.Property<int>("Amazon")
                        .HasColumnType("int");

                    b.Property<int>("Angies")
                        .HasColumnType("int");

                    b.Property<int>("Bbb")
                        .HasColumnType("int");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Facebook")
                        .HasColumnType("int");

                    b.Property<int>("FourSquare")
                        .HasColumnType("int");

                    b.Property<int>("GoogleMyBusiness")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ImDb")
                        .HasColumnType("int");

                    b.Property<int>("Manta")
                        .HasColumnType("int");

                    b.Property<bool>("OwnedCompetition")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TripAdvisor")
                        .HasColumnType("int");

                    b.Property<int>("TrustPilot")
                        .HasColumnType("int");

                    b.Property<int>("Twitter")
                        .HasColumnType("int");

                    b.Property<int>("YelowPages")
                        .HasColumnType("int");

                    b.Property<int>("Yelp")
                        .HasColumnType("int");

                    b.ToTable("Products_bk", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsFacebookSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("account");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit")
                        .HasColumnName("available");

                    b.Property<int?>("Comments")
                        .HasColumnType("int")
                        .HasColumnName("comments");

                    b.Property<string>("CommentsFull")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments_full");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Factcheck")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("factcheck");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("images");

                    b.Property<string>("ImagesLowquality")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("images_lowquality");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsLive")
                        .HasColumnType("bit")
                        .HasColumnName("is_live");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Likes")
                        .HasColumnType("int")
                        .HasColumnName("likes");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("post_id")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("PostText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_text");

                    b.Property<string>("PostUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_url");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reactions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reactions");

                    b.Property<string>("Reactors")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reactors");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SharedPostId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_post_id");

                    b.Property<string>("SharedPostUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_post_url");

                    b.Property<string>("SharedText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_text");

                    b.Property<string>("SharedTime")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_time");

                    b.Property<string>("SharedUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_user_id");

                    b.Property<string>("SharedUsername")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("shared_username");

                    b.Property<int?>("Shares")
                        .HasColumnType("int")
                        .HasColumnName("shares");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2")
                        .HasColumnName("time");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("UserUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_url");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("video");

                    b.Property<string>("VideoId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("video_id");

                    b.Property<string>("VideoThumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("video_thumbnail");

                    b.Property<string>("W3FbUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("w3_fb_url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "uq_products_facebook_search_post_id")
                        .IsUnique();

                    b.ToTable("products_facebook_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsFoursquareReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<double?>("DownVote")
                        .HasColumnType("float")
                        .HasColumnName("down_vote");

                    b.Property<int>("FoursquareId")
                        .HasColumnType("int")
                        .HasColumnName("foursquare_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<double?>("UpVote")
                        .HasColumnType("float")
                        .HasColumnName("up_vote");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.Property<string>("UserJustification")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_justification");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FoursquareId" }, "IX_products_foursquare_reviews_foursquare_id");

                    b.ToTable("products_foursquare_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsFoursquareSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("author");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<string>("BusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("bus_id")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creation_date");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrption")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descrption");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("features");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("justification");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("NumOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("num_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tippets")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tippets");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<string>("Varieties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("varieties");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusId" }, "uq_products_foursquare_search_bus_id")
                        .IsUnique();

                    b.ToTable("products_foursquare_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsImdbReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<int?>("Helpful")
                        .HasColumnType("int")
                        .HasColumnName("helpful");

                    b.Property<int>("ImdbId")
                        .HasColumnType("int")
                        .HasColumnName("imdb_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("Reactions")
                        .HasColumnType("int")
                        .HasColumnName("reactions");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImdbId" }, "IX_products_imdb_reviews_imdb_id");

                    b.ToTable("products_imdb_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsImdbSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<double?>("BestRating")
                        .HasColumnType("float")
                        .HasColumnName("bestRating");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cast");

                    b.Property<string>("ContentRating")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content_rating");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatePublished")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date_published");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("director");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genre");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("keywords");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDuration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movie_duration");

                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movie_id");

                    b.Property<int?>("NumOfRevies")
                        .HasColumnType("int")
                        .HasColumnName("num_of_revies");

                    b.Property<int?>("NumberOfCritics")
                        .HasColumnType("int")
                        .HasColumnName("number_of_critics");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("number_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int")
                        .HasColumnName("popularity");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stars")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("stars");

                    b.Property<string>("Storyline")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("storyline");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("('')");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<double?>("WorstRating")
                        .HasColumnType("float")
                        .HasColumnName("worstRating");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("writer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "uq_products_imdb_search_title")
                        .IsUnique();

                    b.ToTable("products_imdb_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsMantaReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<double?>("CommentRating")
                        .HasColumnType("float")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int>("MantaId")
                        .HasColumnType("int")
                        .HasColumnName("manta_id");

                    b.Property<int?>("Reaction")
                        .HasColumnType("int")
                        .HasColumnName("reaction");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MantaId" }, "IX_products_manta_reviews_manta_id");

                    b.ToTable("products_manta_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsMantaSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<string>("Cast")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cast");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieDuration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movie_duration");

                    b.Property<string>("MovieId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movie_id");

                    b.Property<string>("MovieInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("movie_info");

                    b.Property<string>("NumOfRevies")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("num_of_revies");

                    b.Property<string>("NumberOfCritics")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number_of_critics");

                    b.Property<string>("NumberOfReviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlotKeywords")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("plot_keywords");

                    b.Property<string>("Popularity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("popularity");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review_link");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storyline")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("storyline");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("('')");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "uq_products_manta_search_title")
                        .IsUnique();

                    b.ToTable("products_manta_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsTripAdvisorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<double?>("CommentRating")
                        .HasColumnType("float")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Reaction")
                        .HasColumnType("int")
                        .HasColumnName("reaction");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<int>("TripAdvisorId")
                        .HasColumnType("int")
                        .HasColumnName("trip_advisor_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TripAdvisorId" }, "IX_products_trip_advisor_reviews_trip_advisor_id");

                    b.ToTable("products_trip_advisor_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsTripAdvisorSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressCountry");

                    b.Property<string>("AddressLocality")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressLocality");

                    b.Property<string>("AddressRegion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressRegion");

                    b.Property<double?>("AggregateRatingValue")
                        .HasColumnType("float")
                        .HasColumnName("aggregate_rating_value");

                    b.Property<int?>("AggregateReviewCount")
                        .HasColumnType("int")
                        .HasColumnName("aggregate_review_count");

                    b.Property<string>("BizId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bizId")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("BusinessUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("businessUrl");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categories");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Faq")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("faq");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Neighborhoods")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("neighborhoods");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postalCode");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priceRange");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("streetAddress");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tags");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BizId" }, "uq_products_trip_advisor_search_bizId")
                        .IsUnique();

                    b.ToTable("products_trip_advisor_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsTrustPilotReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<double?>("CommentRating")
                        .HasColumnType("float")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<int>("TrustPilotId")
                        .HasColumnType("int")
                        .HasColumnName("trust_pilot_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TrustPilotId" }, "IX_products_trust_pilot_reviews_trust_pilot_id");

                    b.ToTable("products_trust_pilot_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsTrustPilotSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressCountry");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<int?>("BestRating")
                        .HasColumnType("int")
                        .HasColumnName("bestRating");

                    b.Property<string>("BusId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("bus_id")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfRatings")
                        .HasColumnType("int")
                        .HasColumnName("number_of_ratings");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("number_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewSummary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review_summary");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<int?>("WorstRating")
                        .HasColumnType("int")
                        .HasColumnName("worstRating");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BusId" }, "uq_products_trust_pilot_search_bus_id")
                        .IsUnique();

                    b.ToTable("products_trust_pilot_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsTwitterSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cashtags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cashtags");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("conversation_id")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<double?>("CreatedAt")
                        .HasColumnType("float")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<int?>("Day")
                        .HasColumnType("int")
                        .HasColumnName("day");

                    b.Property<string>("Geo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("geo");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Hashtags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hashtags");

                    b.Property<string>("Hour")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hour");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("language");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Near")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("near");

                    b.Property<int?>("Nlikes")
                        .HasColumnType("int")
                        .HasColumnName("nlikes");

                    b.Property<int?>("Nreplies")
                        .HasColumnType("int")
                        .HasColumnName("nreplies");

                    b.Property<int?>("Nretweets")
                        .HasColumnType("int")
                        .HasColumnName("nretweets");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photos");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("place");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("QuoteUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("quote_url");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyTo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply_to");

                    b.Property<bool?>("Retweet")
                        .HasColumnType("bit")
                        .HasColumnName("retweet");

                    b.Property<string>("RetweetDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("retweet_date");

                    b.Property<string>("RetweetId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("retweet_id");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("timezone");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TransDest")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("trans_dest");

                    b.Property<string>("TransSrc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("trans_src");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("translate");

                    b.Property<string>("Tweet")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tweet");

                    b.Property<string>("TweetId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tweet_id")
                        .HasDefaultValueSql("('')");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Urls")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("urls");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("UserIdStr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_id_str");

                    b.Property<string>("UserRt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_rt");

                    b.Property<string>("UserRtId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_rt_id");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.Property<int?>("Video")
                        .HasColumnType("int")
                        .HasColumnName("video");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TweetId" }, "uq_products_twitter_search_tweet_id")
                        .IsUnique();

                    b.ToTable("products_twitter_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsYellowPagesReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int?>("CommentRating")
                        .HasColumnType("int")
                        .HasColumnName("comment_rating");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<int?>("Helpful")
                        .HasColumnType("int")
                        .HasColumnName("helpful");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.Property<int>("YellowPagesId")
                        .HasColumnType("int")
                        .HasColumnName("yellow_pages_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "YellowPagesId" }, "IX_products_yellow_pages_reviews_yellow_pages_id");

                    b.ToTable("products_yellow_pages_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsYellowPagesSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("BusinessInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_info");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("business_name")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("BusinessPage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("business_page");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListingUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("listing_url");

                    b.Property<string>("Locality")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("locality");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfRatings")
                        .HasColumnType("int")
                        .HasColumnName("number_of_ratings");

                    b.Property<int?>("NumberOfReviews")
                        .HasColumnType("int")
                        .HasColumnName("number_of_reviews");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("post_id")
                        .HasDefaultValueSql("('')");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("region");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reviews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reviews");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telephone");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("website");

                    b.Property<int?>("YearsInBusiness")
                        .HasColumnType("int")
                        .HasColumnName("years_in_business");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "uq_products_yellow_pages_search_post_id")
                        .IsUnique();

                    b.ToTable("products_yellow_pages_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsYelpReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int?>("CommentRating")
                        .HasColumnType("int")
                        .HasColumnName("comment_rating");

                    b.Property<int?>("Cool")
                        .HasColumnType("int")
                        .HasColumnName("cool");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("date");

                    b.Property<int?>("Funny")
                        .HasColumnType("int")
                        .HasColumnName("funny");

                    b.Property<int?>("Helpful")
                        .HasColumnType("int")
                        .HasColumnName("helpful");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<string>("User")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("user");

                    b.Property<int>("YelpId")
                        .HasColumnType("int")
                        .HasColumnName("yelp_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "YelpId" }, "IX_products_yelp_reviews_yelp_id");

                    b.ToTable("products_yelp_reviews", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductsYelpSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressCountry");

                    b.Property<string>("AddressLocality")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressLocality");

                    b.Property<string>("AddressRegion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressRegion");

                    b.Property<double?>("AggregateRatingValue")
                        .HasColumnType("float")
                        .HasColumnName("aggregate_rating_value");

                    b.Property<int?>("AggregateReviewCount")
                        .HasColumnType("int")
                        .HasColumnName("aggregate_review_count");

                    b.Property<string>("BizId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bizId")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("BusinessUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("businessUrl");

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categories");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("CreatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("DataSourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Faq")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("faq");

                    b.Property<int?>("Growth")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("KeyTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MarketId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionDefaultLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("Neighborhoods")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("neighborhoods");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postalCode");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("priceRange");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int")
                        .HasColumnName("ProductId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RawMention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<string>("Search")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("search");

                    b.Property<int?>("Sentiment")
                        .HasColumnType("int");

                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("streetAddress");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tags");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_on");

                    b.Property<DateTime?>("UpdatedOn1")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BizId" }, "uq_products_yelp_search_bizId")
                        .IsUnique();

                    b.ToTable("products_yelp_search", (string)null);
                });

            modelBuilder.Entity("API.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_ProductTypes_TenantId");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("API.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("API.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_Regions_TenantId");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("API.Entities.Search", b =>
                {
                    b.Property<long>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SearchId"), 1L, 1);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<float>("Growth")
                        .HasColumnType("real");

                    b.Property<string>("KeyTerms")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("MarketId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("RawSearch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("SearchTerm")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<float>("Sentiment")
                        .HasColumnType("real");

                    b.Property<long?>("SourceRowId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.HasKey("SearchId");

                    b.HasIndex(new[] { "DataSourceId" }, "IX_Searches_DataSourceId");

                    b.HasIndex(new[] { "DateKey" }, "IX_Searches_DateKey");

                    b.HasIndex(new[] { "LanguageId" }, "IX_Searches_LanguageId");

                    b.HasIndex(new[] { "MarketId" }, "IX_Searches_MarketId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Searches_ProductId");

                    b.HasIndex(new[] { "RegionId" }, "IX_Searches_RegionId");

                    b.HasIndex(new[] { "TopicLevel1Id" }, "IX_Searches_TopicLevel1Id");

                    b.HasIndex(new[] { "TopicLevel2Id" }, "IX_Searches_TopicLevel2Id");

                    b.HasIndex(new[] { "TopicLevel3Id" }, "IX_Searches_TopicLevel3Id");

                    b.ToTable("Searches", (string)null);
                });

            modelBuilder.Entity("API.Entities.SearchVolumeByMonth", b =>
                {
                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EnglishMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Searches")
                        .HasColumnType("int");

                    b.ToView("SearchVolumeByMonth");
                });

            modelBuilder.Entity("API.Entities.SentimentDecreaseLevel1", b =>
                {
                    b.Property<float?>("SentimentDecrease")
                        .HasColumnType("real");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("SentimentDecreaseLevel1");
                });

            modelBuilder.Entity("API.Entities.SentimentDecreaseLevel2", b =>
                {
                    b.Property<float?>("SentimentDecrease")
                        .HasColumnType("real");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("SentimentDecreaseLevel2");
                });

            modelBuilder.Entity("API.Entities.SentimentDecreaseLevel3", b =>
                {
                    b.Property<int?>("SentimentDecrease")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("SentimentDecreaseLevel3");
                });

            modelBuilder.Entity("API.Entities.TimePeriod", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<byte>("CalendarQuarter")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CalendarSemester")
                        .HasColumnType("tinyint");

                    b.Property<short>("CalendarYear")
                        .HasColumnType("smallint");

                    b.Property<byte>("DayNumberOfMonth")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DayNumberOfWeek")
                        .HasColumnType("tinyint");

                    b.Property<short>("DayNumberOfYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EnglishDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EnglishMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("FiscalQuarter")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FiscalSemester")
                        .HasColumnType("tinyint");

                    b.Property<short>("FiscalYear")
                        .HasColumnType("smallint");

                    b.Property<string>("FrenchDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FrenchMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("FullDateAlternateKey")
                        .HasColumnType("date");

                    b.Property<byte>("MonthNumberOfYear")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpanishDayNameOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SpanishMonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte>("WeekNumberOfYear")
                        .HasColumnType("tinyint");

                    b.HasKey("DateKey")
                        .HasName("PK_TimePeriod_DateKey");

                    b.HasIndex(new[] { "FullDateAlternateKey" }, "AK_TimePeriod_FullDateAlternateKey")
                        .IsUnique();

                    b.ToTable("TimePeriods", (string)null);
                });

            modelBuilder.Entity("API.Entities.TopicCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_TopicCategories_TenantId");

                    b.ToTable("TopicCategories", (string)null);
                });

            modelBuilder.Entity("API.Entities.TopicLevel1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_TopicLevel1_TenantId");

                    b.HasIndex(new[] { "TopicCategoryId" }, "IX_TopicLevel1_TopicCategoryId");

                    b.ToTable("TopicLevel1", (string)null);
                });

            modelBuilder.Entity("API.Entities.TopicLevel1Mention", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<float>("Growth")
                        .HasColumnType("real");

                    b.Property<long>("MentionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RawSource")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Sentiment")
                        .HasColumnType("real");

                    b.Property<int>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("TopicLevel1Mentions");
                });

            modelBuilder.Entity("API.Entities.TopicLevel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_TopicLevel2_TenantId");

                    b.HasIndex(new[] { "TopicCategoryId" }, "IX_TopicLevel2_TopicCategoryId");

                    b.HasIndex(new[] { "TopicLevel1Id" }, "IX_TopicLevel2_TopicLevel1Id");

                    b.ToTable("TopicLevel2", (string)null);
                });

            modelBuilder.Entity("API.Entities.TopicLevel2Mention", b =>
                {
                    b.Property<float>("Growth")
                        .HasColumnType("real");

                    b.Property<long>("MentionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RawSource")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Sentiment")
                        .HasColumnType("real");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<int>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("TopicLevel2Mentions");
                });

            modelBuilder.Entity("API.Entities.TopicLevel3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TenantId" }, "IX_TopicLevel3_TenantId");

                    b.HasIndex(new[] { "TopicCategoryId" }, "IX_TopicLevel3_TopicCategoryId");

                    b.HasIndex(new[] { "TopicLevel2Id" }, "IX_TopicLevel3_TopicLevel2Id");

                    b.ToTable("TopicLevel3", (string)null);
                });

            modelBuilder.Entity("API.Entities.TopicLevel3Mention", b =>
                {
                    b.Property<float>("Growth")
                        .HasColumnType("real");

                    b.Property<long>("MentionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RawSource")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<float>("Sentiment")
                        .HasColumnType("real");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<int>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("TopicLevel3Mentions");
                });

            modelBuilder.Entity("API.Entities.TotalSearchVolumeTopicLevel1", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel1Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.ToView("TotalSearchVolumeTopicLevel1");
                });

            modelBuilder.Entity("API.Entities.TotalSearchVolumeTopicLevel2", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel2Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.ToView("TotalSearchVolumeTopicLevel2");
                });

            modelBuilder.Entity("API.Entities.TotalSearchVolumeTopicLevel3", b =>
                {
                    b.Property<int>("DateKey")
                        .HasColumnType("int");

                    b.Property<int?>("TopicCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicLevel3Id")
                        .HasColumnType("int");

                    b.Property<string>("TopicLevelTerm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.ToView("TotalSearchVolumeTopicLevel3");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a188478c-5ecc-4423-bb2c-3cc516b67bf5",
                            ConcurrencyStamp = "69310e20-7d43-4161-9aa0-2360a12230a7",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "ca53eb66-78fd-4624-8b16-0ba09f954116",
                            ConcurrencyStamp = "e28c4fea-1b83-4448-9b63-a14eb68f955d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.AbpDynamicEntityProperty", b =>
                {
                    b.HasOne("API.Entities.AbpDynamicProperty", "DynamicProperty")
                        .WithMany("AbpDynamicEntityProperties")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("API.Entities.AbpDynamicEntityPropertyValue", b =>
                {
                    b.HasOne("API.Entities.AbpDynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany("AbpDynamicEntityPropertyValues")
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicEntityProperty");
                });

            modelBuilder.Entity("API.Entities.AbpDynamicPropertyValue", b =>
                {
                    b.HasOne("API.Entities.AbpDynamicProperty", "DynamicProperty")
                        .WithMany("AbpDynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("API.Entities.AbpEntityChange", b =>
                {
                    b.HasOne("API.Entities.AbpEntityChangeSet", "EntityChangeSet")
                        .WithMany("AbpEntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityChangeSet");
                });

            modelBuilder.Entity("API.Entities.AbpEntityPropertyChange", b =>
                {
                    b.HasOne("API.Entities.AbpEntityChange", "EntityChange")
                        .WithMany("AbpEntityPropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityChange");
                });

            modelBuilder.Entity("API.Entities.AbpFeature", b =>
                {
                    b.HasOne("API.Entities.AbpEdition", "Edition")
                        .WithMany("AbpFeatures")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("API.Entities.AbpOrganizationUnit", b =>
                {
                    b.HasOne("API.Entities.AbpOrganizationUnit", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("API.Entities.AbpPermission", b =>
                {
                    b.HasOne("API.Entities.AbpRole", "Role")
                        .WithMany("AbpPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpRole", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "CreatorUser")
                        .WithMany("AbpRoleCreatorUsers")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("API.Entities.AbpUser", "DeleterUser")
                        .WithMany("AbpRoleDeleterUsers")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("API.Entities.AbpUser", "LastModifierUser")
                        .WithMany("AbpRoleLastModifierUsers")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("API.Entities.AbpRoleClaim", b =>
                {
                    b.HasOne("API.Entities.AbpRole", "Role")
                        .WithMany("AbpRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Entities.AbpSetting", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpSettings")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpTenant", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "CreatorUser")
                        .WithMany("AbpTenantCreatorUsers")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("API.Entities.AbpUser", "DeleterUser")
                        .WithMany("AbpTenantDeleterUsers")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("API.Entities.AbpEdition", "Edition")
                        .WithMany("AbpTenants")
                        .HasForeignKey("EditionId");

                    b.HasOne("API.Entities.AbpUser", "LastModifierUser")
                        .WithMany("AbpTenantLastModifierUsers")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("Edition");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("API.Entities.AbpUser", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "CreatorUser")
                        .WithMany("InverseCreatorUser")
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("API.Entities.AbpUser", "DeleterUser")
                        .WithMany("InverseDeleterUser")
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("API.Entities.AbpUser", "LastModifierUser")
                        .WithMany("InverseLastModifierUser")
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("API.Entities.AbpUserClaim", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpUserLogin", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpUserOrganizationUnit", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpUserOrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpUserRole", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpUserToken", b =>
                {
                    b.HasOne("API.Entities.AbpUser", "User")
                        .WithMany("AbpUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AbpWebhookSendAttempt", b =>
                {
                    b.HasOne("API.Entities.AbpWebhookEvent", "WebhookEvent")
                        .WithMany("AbpWebhookSendAttempts")
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("API.Entities.AppSubscriptionPayment", b =>
                {
                    b.HasOne("API.Entities.AbpEdition", "Edition")
                        .WithMany("AppSubscriptionPayments")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("API.Entities.Mention", b =>
                {
                    b.HasOne("API.Entities.DataSource", "DataSource")
                        .WithMany("Mentions")
                        .HasForeignKey("DataSourceId");

                    b.HasOne("API.Entities.TimePeriod", "DateKeyNavigation")
                        .WithMany("Mentions")
                        .HasForeignKey("DateKey")
                        .IsRequired()
                        .HasConstraintName("FK_Mention_TimePeriod");

                    b.HasOne("API.Entities.AbpLanguage", "Language")
                        .WithMany("Mentions")
                        .HasForeignKey("LanguageId");

                    b.HasOne("API.Entities.Market", "Market")
                        .WithMany("Mentions")
                        .HasForeignKey("MarketId");

                    b.HasOne("API.Entities.Product", "Product")
                        .WithMany("Mentions")
                        .HasForeignKey("ProductId");

                    b.HasOne("API.Entities.Region", "Region")
                        .WithMany("Mentions")
                        .HasForeignKey("RegionId");

                    b.HasOne("API.Entities.TopicLevel1", "TopicLevel1")
                        .WithMany("Mentions")
                        .HasForeignKey("TopicLevel1Id");

                    b.HasOne("API.Entities.TopicLevel2", "TopicLevel2")
                        .WithMany("Mentions")
                        .HasForeignKey("TopicLevel2Id");

                    b.HasOne("API.Entities.TopicLevel3", "TopicLevel3")
                        .WithMany("Mentions")
                        .HasForeignKey("TopicLevel3Id");

                    b.Navigation("DataSource");

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("Language");

                    b.Navigation("Market");

                    b.Navigation("Product");

                    b.Navigation("Region");

                    b.Navigation("TopicLevel1");

                    b.Navigation("TopicLevel2");

                    b.Navigation("TopicLevel3");
                });

            modelBuilder.Entity("API.Entities.Product", b =>
                {
                    b.HasOne("API.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("API.Entities.Competition", "Competition")
                        .WithMany("Products")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("API.Entities.ProductClassification", "ProductClassification")
                        .WithMany("Products")
                        .HasForeignKey("ProductClassificationId");

                    b.HasOne("API.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.HasOne("API.Entities.TopicCategory", "TopicCategory")
                        .WithMany("Products")
                        .HasForeignKey("TopicCategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Competition");

                    b.Navigation("ProductClassification");

                    b.Navigation("ProductType");

                    b.Navigation("TopicCategory");
                });

            modelBuilder.Entity("API.Entities.ProductsAmazonReview", b =>
                {
                    b.HasOne("API.Entities.ProductsAmazonSearch", "Amazon")
                        .WithMany("ProductsAmazonReviews")
                        .HasForeignKey("AmazonId")
                        .IsRequired()
                        .HasConstraintName("fk_products_amazon_reviews_amazon_id_products_amazon_search");

                    b.Navigation("Amazon");
                });

            modelBuilder.Entity("API.Entities.ProductsBbbReview", b =>
                {
                    b.HasOne("API.Entities.ProductsBbbSearch", "Bbb")
                        .WithMany("ProductsBbbReviews")
                        .HasForeignKey("BbbId")
                        .IsRequired()
                        .HasConstraintName("fk_products_bbb_reviews_bbb_id_products_bbb_search");

                    b.Navigation("Bbb");
                });

            modelBuilder.Entity("API.Entities.ProductsFoursquareReview", b =>
                {
                    b.HasOne("API.Entities.ProductsFoursquareSearch", "Foursquare")
                        .WithMany("ProductsFoursquareReviews")
                        .HasForeignKey("FoursquareId")
                        .IsRequired()
                        .HasConstraintName("fk_products_foursquare_reviews_foursquare_id_products_foursquare_search");

                    b.Navigation("Foursquare");
                });

            modelBuilder.Entity("API.Entities.ProductsImdbReview", b =>
                {
                    b.HasOne("API.Entities.ProductsImdbSearch", "Imdb")
                        .WithMany("ProductsImdbReviews")
                        .HasForeignKey("ImdbId")
                        .IsRequired()
                        .HasConstraintName("fk_products_imdb_reviews_imdb_id_products_imdb_search");

                    b.Navigation("Imdb");
                });

            modelBuilder.Entity("API.Entities.ProductsMantaReview", b =>
                {
                    b.HasOne("API.Entities.ProductsMantaSearch", "Manta")
                        .WithMany("ProductsMantaReviews")
                        .HasForeignKey("MantaId")
                        .IsRequired()
                        .HasConstraintName("fk_products_manta_reviews_manta_id_products_manta_search");

                    b.Navigation("Manta");
                });

            modelBuilder.Entity("API.Entities.ProductsTripAdvisorReview", b =>
                {
                    b.HasOne("API.Entities.ProductsTripAdvisorSearch", "TripAdvisor")
                        .WithMany("ProductsTripAdvisorReviews")
                        .HasForeignKey("TripAdvisorId")
                        .IsRequired()
                        .HasConstraintName("fk_products_trip_advisor_reviews_trip_advisor_id_products_trip_advisor_search");

                    b.Navigation("TripAdvisor");
                });

            modelBuilder.Entity("API.Entities.ProductsTrustPilotReview", b =>
                {
                    b.HasOne("API.Entities.ProductsTrustPilotSearch", "TrustPilot")
                        .WithMany("ProductsTrustPilotReviews")
                        .HasForeignKey("TrustPilotId")
                        .IsRequired()
                        .HasConstraintName("fk_products_trust_pilot_reviews_trust_pilot_id_products_trust_pilot_search");

                    b.Navigation("TrustPilot");
                });

            modelBuilder.Entity("API.Entities.ProductsYellowPagesReview", b =>
                {
                    b.HasOne("API.Entities.ProductsYellowPagesSearch", "YellowPages")
                        .WithMany("ProductsYellowPagesReviews")
                        .HasForeignKey("YellowPagesId")
                        .IsRequired()
                        .HasConstraintName("fk_products_yellow_pages_reviews_yellow_pages_id_products_yellow_pages_search");

                    b.Navigation("YellowPages");
                });

            modelBuilder.Entity("API.Entities.ProductsYelpReview", b =>
                {
                    b.HasOne("API.Entities.ProductsYelpSearch", "Yelp")
                        .WithMany("ProductsYelpReviews")
                        .HasForeignKey("YelpId")
                        .IsRequired()
                        .HasConstraintName("fk_products_yelp_reviews_yelp_id_products_yelp_search");

                    b.Navigation("Yelp");
                });

            modelBuilder.Entity("API.Entities.RefreshToken", b =>
                {
                    b.HasOne("API.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("API.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API.Entities.Search", b =>
                {
                    b.HasOne("API.Entities.DataSource", "DataSource")
                        .WithMany("Searches")
                        .HasForeignKey("DataSourceId");

                    b.HasOne("API.Entities.TimePeriod", "DateKeyNavigation")
                        .WithMany("Searches")
                        .HasForeignKey("DateKey")
                        .IsRequired()
                        .HasConstraintName("FK_Search_TimePeriod");

                    b.HasOne("API.Entities.AbpLanguage", "Language")
                        .WithMany("Searches")
                        .HasForeignKey("LanguageId");

                    b.HasOne("API.Entities.Market", "Market")
                        .WithMany("Searches")
                        .HasForeignKey("MarketId");

                    b.HasOne("API.Entities.Product", "Product")
                        .WithMany("Searches")
                        .HasForeignKey("ProductId");

                    b.HasOne("API.Entities.Region", "Region")
                        .WithMany("Searches")
                        .HasForeignKey("RegionId");

                    b.HasOne("API.Entities.TopicLevel1", "TopicLevel1")
                        .WithMany("Searches")
                        .HasForeignKey("TopicLevel1Id");

                    b.HasOne("API.Entities.TopicLevel2", "TopicLevel2")
                        .WithMany("Searches")
                        .HasForeignKey("TopicLevel2Id");

                    b.HasOne("API.Entities.TopicLevel3", "TopicLevel3")
                        .WithMany("Searches")
                        .HasForeignKey("TopicLevel3Id");

                    b.Navigation("DataSource");

                    b.Navigation("DateKeyNavigation");

                    b.Navigation("Language");

                    b.Navigation("Market");

                    b.Navigation("Product");

                    b.Navigation("Region");

                    b.Navigation("TopicLevel1");

                    b.Navigation("TopicLevel2");

                    b.Navigation("TopicLevel3");
                });

            modelBuilder.Entity("API.Entities.TopicLevel1", b =>
                {
                    b.HasOne("API.Entities.TopicCategory", "TopicCategory")
                        .WithMany("TopicLevel1s")
                        .HasForeignKey("TopicCategoryId");

                    b.Navigation("TopicCategory");
                });

            modelBuilder.Entity("API.Entities.TopicLevel2", b =>
                {
                    b.HasOne("API.Entities.TopicCategory", "TopicCategory")
                        .WithMany("TopicLevel2s")
                        .HasForeignKey("TopicCategoryId");

                    b.HasOne("API.Entities.TopicLevel1", "TopicLevel1")
                        .WithMany("TopicLevel2s")
                        .HasForeignKey("TopicLevel1Id");

                    b.Navigation("TopicCategory");

                    b.Navigation("TopicLevel1");
                });

            modelBuilder.Entity("API.Entities.TopicLevel3", b =>
                {
                    b.HasOne("API.Entities.TopicCategory", "TopicCategory")
                        .WithMany("TopicLevel3s")
                        .HasForeignKey("TopicCategoryId");

                    b.HasOne("API.Entities.TopicLevel2", "TopicLevel2")
                        .WithMany("TopicLevel3s")
                        .HasForeignKey("TopicLevel2Id");

                    b.Navigation("TopicCategory");

                    b.Navigation("TopicLevel2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AbpDynamicEntityProperty", b =>
                {
                    b.Navigation("AbpDynamicEntityPropertyValues");
                });

            modelBuilder.Entity("API.Entities.AbpDynamicProperty", b =>
                {
                    b.Navigation("AbpDynamicEntityProperties");

                    b.Navigation("AbpDynamicPropertyValues");
                });

            modelBuilder.Entity("API.Entities.AbpEdition", b =>
                {
                    b.Navigation("AbpFeatures");

                    b.Navigation("AbpTenants");

                    b.Navigation("AppSubscriptionPayments");
                });

            modelBuilder.Entity("API.Entities.AbpEntityChange", b =>
                {
                    b.Navigation("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("API.Entities.AbpEntityChangeSet", b =>
                {
                    b.Navigation("AbpEntityChanges");
                });

            modelBuilder.Entity("API.Entities.AbpLanguage", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.AbpOrganizationUnit", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("API.Entities.AbpRole", b =>
                {
                    b.Navigation("AbpPermissions");

                    b.Navigation("AbpRoleClaims");
                });

            modelBuilder.Entity("API.Entities.AbpUser", b =>
                {
                    b.Navigation("AbpPermissions");

                    b.Navigation("AbpRoleCreatorUsers");

                    b.Navigation("AbpRoleDeleterUsers");

                    b.Navigation("AbpRoleLastModifierUsers");

                    b.Navigation("AbpSettings");

                    b.Navigation("AbpTenantCreatorUsers");

                    b.Navigation("AbpTenantDeleterUsers");

                    b.Navigation("AbpTenantLastModifierUsers");

                    b.Navigation("AbpUserClaims");

                    b.Navigation("AbpUserLogins");

                    b.Navigation("AbpUserOrganizationUnits");

                    b.Navigation("AbpUserRoles");

                    b.Navigation("AbpUserTokens");

                    b.Navigation("InverseCreatorUser");

                    b.Navigation("InverseDeleterUser");

                    b.Navigation("InverseLastModifierUser");
                });

            modelBuilder.Entity("API.Entities.AbpWebhookEvent", b =>
                {
                    b.Navigation("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("API.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.Competition", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.DataSource", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.Market", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.Product", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.ProductClassification", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.ProductsAmazonSearch", b =>
                {
                    b.Navigation("ProductsAmazonReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsBbbSearch", b =>
                {
                    b.Navigation("ProductsBbbReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsFoursquareSearch", b =>
                {
                    b.Navigation("ProductsFoursquareReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsImdbSearch", b =>
                {
                    b.Navigation("ProductsImdbReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsMantaSearch", b =>
                {
                    b.Navigation("ProductsMantaReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsTripAdvisorSearch", b =>
                {
                    b.Navigation("ProductsTripAdvisorReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsTrustPilotSearch", b =>
                {
                    b.Navigation("ProductsTrustPilotReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsYellowPagesSearch", b =>
                {
                    b.Navigation("ProductsYellowPagesReviews");
                });

            modelBuilder.Entity("API.Entities.ProductsYelpSearch", b =>
                {
                    b.Navigation("ProductsYelpReviews");
                });

            modelBuilder.Entity("API.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("API.Entities.Region", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.TimePeriod", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.TopicCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TopicLevel1s");

                    b.Navigation("TopicLevel2s");

                    b.Navigation("TopicLevel3s");
                });

            modelBuilder.Entity("API.Entities.TopicLevel1", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");

                    b.Navigation("TopicLevel2s");
                });

            modelBuilder.Entity("API.Entities.TopicLevel2", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");

                    b.Navigation("TopicLevel3s");
                });

            modelBuilder.Entity("API.Entities.TopicLevel3", b =>
                {
                    b.Navigation("Mentions");

                    b.Navigation("Searches");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
